#!/usr/bin/env perl
## Copyright Â© 2008-2009 by Daniel Friesel <derf@derf.homelinux.org>
## License: WTFPL <http://sam.zoy.org/wtfpl>
use strict;
use warnings;
use 5.010;

use Getopt::Std;
use LWP::Simple;
use String::Format;
use XML::LibXML;

my $basedir = "$ENV{HOME}/lib/pics/4chan";
my $thread_url;
my ($server, $board, $thread);
my %opts;
my $number = 0;
my (@images);
my $html;
my @fred;
local $| = 1;
my $url_re = qr{
	^ http:// boards \. 4chan \. org
	/ (?<board> \w+ ) / res / (?<thread> \d+ ) $
}x;


getopts('b:c:d:f:n:t:', \%opts);

sub print_progress {
	printf(
		"\r\e[2KDownloading image %d/%d (%d%%)",
		$number,
		scalar @fred,
		$number * 100 / @fred,
	);
	return;
}

sub make_dirs {
	foreach my $dir ("$basedir/$board", "$basedir/$board/$thread") {
		if (not -d $dir) {
			mkdir($dir) or die("Cannot create directory $dir: $!");
		}
	}
	return;
}

sub save_image {
	my ($img, $name) = @_;
	if (not -f "$basedir/$board/$thread/$name") {
		open(my $image, '>', "$basedir/$board/$thread/$name")
			or die("Cannot open $name: $!");
		print {$image} get($img);
		close($image) or die("Cannot close $name: $!");
	}
	return;
}

sub save_text {
	my ($fn, $text) = @_;
	if (not -f "$basedir/$board/$thread/$fn") {
		open(my $fh, '>', "$basedir/$board/$thread/$fn")
			or die("Cannot open $fn: $!");
		print {$fh} $text;
		close($fh);
	}
	return;
}


$thread_url = shift;

if ($thread_url !~ $url_re) {
	die("Cannot parse url '$thread_url'");
}

$server = $+{server};
$board = $opts{b} // $+{board};
$thread = $opts{n} // $+{thread};
my $img_template = $opts{f} // "%f";
my $comment_template = $opts{c};
my $text_template = $opts{t} // "%t";

if (defined $opts{d}) {
	$basedir = $opts{d};
}

$html = XML::LibXML->load_html(
	string  => get($thread_url),
	recover => 2,
	suppress_errors   => 1,
	suppress_warnings => 1,
);

my $xp_thread = XML::LibXML::XPathExpression->new(
	'//form[@name="delform"]');

($html) = $html->findnodes($xp_thread);

my $xp_op_img_link = XML::LibXML::XPathExpression->new(
	'./a'
);
my $xp_op_img_name = XML::LibXML::XPathExpression->new(
	'./span/span'
);
my $xp_op_text = XML::LibXML::XPathExpression->new(
	'./blockquote'
);

my $xp_replies = XML::LibXML::XPathExpression->new(
	'//form[@name="delform"]/table/tr/td'
);

my $xp_r_img_link = XML::LibXML::XPathExpression->new(
	'./span[@class="filesize"]/a'
);
my $xp_r_img_name = $xp_op_img_name;
my $xp_r_text = $xp_op_text;

push(@fred, [
	($html->findnodes($xp_op_img_link))[0]->getAttribute('href'),
	($html->findnodes($xp_op_img_name))[0]->textContent(),
	($html->findnodes($xp_op_text))[0]->textContent(),
]);

foreach my $element ($html->findnodes($xp_replies)) {
	my $n_link = ($element->findnodes($xp_r_img_link))[0];
	my $n_name = ($element->findnodes($xp_r_img_name))[0];
	my $n_text = ($element->findnodes($xp_r_text))[0];
	my ($link, $name, $text);

	next if (not defined $n_text);

	if (defined $n_link) {
		$link = $n_link->getAttribute('href');
	}
	if (defined $n_name) {
		$name = $n_name->textContent();
	}
	if (defined $n_text) {
		$text = $n_text->textContent();
	}
	push(@fred, [$link, $name, $text]);
}

make_dirs();

for my $i (0 .. $#fred) {
	my ($url, $name, $text) = @{$fred[$i]};
	
	$url //= q{};

	my %format = (
		'f' => (split(qr{/}, $url))[-1] // q{},
		'i' => $i,
		'n' => $name // q{},
		't' => $text // q{},
		'u' => $url  // q{},
	);

	$number++;
	print_progress();
	if (length($url)) {
		save_image($url, stringf($img_template, %format));
	}
	if (defined $comment_template) {
		save_text(
			stringf($comment_template, %format),
			stringf($text_template, %format),
		);
	}
}


print "\n";

__END__

=head1 NAME

4chan-dl - Download images from 4chan threads

=head1 SYNOPSIS

B<4chan-dl> [B<-b> I<board>] [B<-n> I<name>] I<thread_url>

=head1 DESCRIPTION

B<4chan-dl> Downloads all images in a thread (designated by I<thread_url>)
from 4chan.
They are saved in F<~/lib/pics/4chan/server/board/name>, where board and name
can be overriden by commandline options

=head1 OPTIONS

=over

=item B<-b> I<board>

Save images in I<board> instead of the board name they are from

=item B<-d> I<directory>

Change base directory

=item B<-n> I<name>

Save images in the directory I<name> instead of the thread number

=back
